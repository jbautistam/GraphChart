<UserControl x:Class="Bau.Controls.GraphChartControl.GraphChartView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Bau.Controls.GraphChartControl"
             xmlns:GraphChartControlView="clr-namespace:Bau.Controls.GraphChartControl.Views"
			 xmlns:GraphChartViewModel="clr-namespace:Bau.Libraries.GraphChart.ViewModels;assembly=GraphChart.ViewModels"
             xmlns:ArrowShapes="clr-namespace:Bau.Controls.GraphChartControl.Shapes"
             xmlns:Adorners="clr-namespace:Bau.Controls.GraphChartControl.Adorners"
             xmlns:Indicators="clr-namespace:Bau.Controls.GraphChartControl.Indicators"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Themes/SharedVisualTemplates.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<!-- UI commands. -->
			<RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
			<RoutedUICommand x:Key="Commands.CreateNode" />
			<RoutedUICommand x:Key="Commands.DeleteNode" />
			<RoutedUICommand x:Key="Commands.DeleteConnection" />
			<!-- 
            This graphic is used to indicate that a connection cannot be made between two particular connectors.        
            -->
			<DataTemplate DataType="{x:Type Indicators:ConnectionBadIndicator}">
				<Grid Width="80">
					<Image Width="32" Height="32" Source="Resources/block_16.png" HorizontalAlignment="Right" />
				</Grid>
			</DataTemplate>
			<!-- 
            This graphic is used to indicate that a connection can be made between two particular connectors.        
            -->
			<DataTemplate DataType="{x:Type Indicators:ConnectionOkIndicator}">
				<Grid Width="80" >
					<Image Width="32" Height="32" Source="Resources/tick_16.png" HorizontalAlignment="Right" />
				</Grid>
			</DataTemplate>
			<!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
			<Style TargetType="{x:Type GraphChartControlView:ConnectorItem}">
				<!-- 
                Data-binding for the connector hotspot.
                ConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
				<Setter Property="Hotspot" Value="{Binding Hotspot, Mode=OneWayToSource}" />

				<!-- The visual template. -->
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GraphChartControlView:ConnectorItem}" >
							<!-- The visual for the connector. -->
							<Ellipse Stroke="{StaticResource nodeBorderBrush}" Fill="{StaticResource connectorBackgroundBrush}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!-- 
            Template for the button that is used to delete nodes and connections in the graph.
            This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
			<ControlTemplate x:Key="deleteButtonTemplate" TargetType="{x:Type Button}">
				<Grid x:Name="grid">
					<Grid.RenderTransform>
						<ScaleTransform ScaleX="1" ScaleY="1" CenterX="10" CenterY="10" />
					</Grid.RenderTransform>
					<Ellipse x:Name="shadow" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="Gray">
						<Ellipse.RenderTransform>
							<TranslateTransform X="1.5" Y="1.5" />
						</Ellipse.RenderTransform>
					</Ellipse>
					<Ellipse x:Name="ellipse" Stroke="Black" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="White" />
					<Image Source="Resources\scissors.png" Margin="2" />
				</Grid>
				<ControlTemplate.Triggers>
					<EventTrigger RoutedEvent="Mouse.MouseEnter">
						<!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
						<BeginStoryboard>
							<Storyboard>
								<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                 To="1.3" Duration="0:0:0.25" />
								<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                 To="1.3" Duration="0:0:0.25" />
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger>
					<EventTrigger RoutedEvent="Mouse.MouseLeave">
						<!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
						<BeginStoryboard>
							<Storyboard>
								<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                 To="1" Duration="0:0:0.05" />
								<DoubleAnimation Storyboard.TargetName="grid" Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                 To="1" Duration="0:0:0.05" />
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
			<DataTemplate DataType="{x:Type GraphChartViewModel:ConnectionViewModel}">

				<!-- 
                An adorned control is used, to represent the connection. 
                When the user hovers the mouse cursor over the connection, the 
                'delete connection' adorner pops up and allows them to delete the connection.
                -->
				<Adorners:AdornedControl HorizontalAdornerPlacement="Mouse" VerticalAdornerPlacement="Mouse"
                                         IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}">
					<!-- The connection is represented by a curved arrow. -->
					<ArrowShapes:CurvedArrow Stroke="{StaticResource connectionBrush}" StrokeThickness="2" Fill="{StaticResource connectionBrush}"
                                             Points="{Binding Points}" />
					<Adorners:AdornedControl.AdornerContent>
						<!-- 
                        This is the adorner that pops up when the user hovers the mouse over the connection.
                        It displays a button that the user can click to delete the connection.
                        -->
						<Canvas x:Name="connectionAdornerCanvas" HorizontalAlignment="Right" VerticalAlignment="Top" Width="30" Height="30">
							<Line X1="0" Y1="30" X2="15" Y2="15" Stroke="Black" StrokeThickness="1" />
							<Button x:Name="deleteConnectionButton" Canvas.Left="10" Canvas.Top="0" Width="20" Height="20"
                                    Cursor="Hand" Focusable="False" Command="{StaticResource Commands.DeleteConnection}"
                                    CommandParameter="{Binding}" Template="{StaticResource deleteButtonTemplate}" />
						</Canvas>
					</Adorners:AdornedControl.AdornerContent>
				</Adorners:AdornedControl>
			</DataTemplate>
			<!-- Define a data-template for the 'NodeViewModel' class. -->
			<DataTemplate DataType="{x:Type GraphChartViewModel:NodeViewModel}">
				<!-- 
                An adorned control is used, to represent the node. 
                When the user hovers the mouse cursor over the node, the 
                'delete node' adorner pops up and allows them to delete the node.
                -->
				<Adorners:AdornedControl HorizontalAdornerPlacement="Outside" VerticalAdornerPlacement="Outside" AdornerOffsetX="-12"
                                         AdornerOffsetY="8" IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}">
					<!-- The margin has been selected so that the selection rect nicely covers the entire node. -->
					<Grid MinWidth="120" Margin="10,6,10,6" SizeChanged="Node_SizeChanged">
						<!-- This rectangle is the main visual for the node. -->
						<Rectangle Stroke="{StaticResource nodeBorderBrush}" StrokeThickness="1.3" RadiusX="4" RadiusY="4" Fill="{StaticResource nodeFillBrush}"/>
						<!-- 
							This grid contains the node's connectors.
							The margin is negative so that the connectors overlap the body of the node and it's selection border.
                        -->
						<Grid Margin="-6,4,-6,4">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" MinWidth="10" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<!-- spacer -->
								<RowDefinition Height="2" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<!-- The name of the node. -->
							<TextBlock Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="0" Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
							<!-- Displays the node's input connectors. -->
							<ItemsControl Grid.Column="0" Grid.Row="2" ItemsSource="{Binding InputConnectors}" ItemTemplate="{StaticResource inputConnectorTemplate}"
										  Focusable="False" />
							<!-- Displays the node's output connectors. -->
							<ItemsControl Grid.Column="2" Grid.Row="2" ItemsSource="{Binding OutputConnectors}" ItemTemplate="{StaticResource outputConnectorTemplate}"
										  Focusable="False" />
						</Grid>
					</Grid>
					<Adorners:AdornedControl.AdornerContent>
						<!-- 
							This is the adorner that pops up when the user hovers the mouse over the node.
							It displays a button that the user can click to delete the node.
                        -->
						<Canvas x:Name="nodeAdornerCanvas" HorizontalAlignment="Right" VerticalAlignment="Top" Width="30" Height="30">
							<Line X1="0" Y1="30" X2="15" Y2="15" Stroke="Black" StrokeThickness="1" />
							<Button x:Name="deleteNodeButton" Canvas.Left="10" Canvas.Top="0" Width="20" Height="20"
									Cursor="Hand" Focusable="False" Command="{StaticResource Commands.DeleteNode}"
									CommandParameter="{Binding}" Template="{StaticResource deleteButtonTemplate}" />
						</Canvas>
					</Adorners:AdornedControl.AdornerContent>
				</Adorners:AdornedControl>
			</DataTemplate>
		</ResourceDictionary>
	</UserControl.Resources>
	<UserControl.DataContext>
		<local:GraphChartViewModel />
	</UserControl.DataContext>
	<!-- 
		The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
		Focusable is set to False because it is only that NetworkView that I want to be focusable.
	-->
	<ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Visible" Focusable="False">
		<!--
			We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
			we zoom in and out using the ZoomAndPanControl
        -->
		<AdornerDecorator>
			<!--
				This grid specifies the size of the ZoomAndPanControl's content.
				It wraps up both the NetworkView and drag-zooming Canvas.
            -->
			<Grid Width="{Binding ContentWidth}" Height="{Binding ContentHeight}">
				<!-- In this sample the NetworkView is the content displayed by the ZoomAndPanControl. -->
				<GraphChartControlView:NetworkView x:Name="networkControl" NodesSource="{Binding Network.Nodes}"
												   ConnectionsSource="{Binding Path=Network.Connections}"
												   ConnectionDragStarted="networkControl_ConnectionDragStarted"
												   QueryConnectionFeedback="networkControl_QueryConnectionFeedback"
												   ConnectionDragging="networkControl_ConnectionDragging"
												   ConnectionDragCompleted="networkControl_ConnectionDragCompleted" />
				<!--
                    This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                    uses to specify an area to zoom in on.
				-->
				<Canvas x:Name="dragZoomCanvas" Visibility="Collapsed">
					<Border x:Name="dragZoomBorder" BorderBrush="Black" BorderThickness="1" Background="Silver" CornerRadius="1" Opacity="0" />
				</Canvas>
			</Grid>
		</AdornerDecorator>
	</ScrollViewer>
</UserControl>